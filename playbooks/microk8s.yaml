# credit: https://github.com/istvano/ansible_role_microk8s
- name: microk8s
  hosts: microk8s_nodes
  vars:
    wait_for_microk8s_command: /snap/bin/microk8s.status --wait-ready
    path_to_microk8s_config: ./{{ inventory_hostname_short }}.microk8s.config
  tasks:
    - name: install
      block:
        - name: install microk8s
          become: yes
          snap:
            name: microk8s
            classic: yes
            channel: "{{ microk8s_channel }}"

        - name: add microk8s users to group
          become: yes
          command: "usermod -a -G microk8s {{ user }}"
          changed_when: true
          with_items: '{{ microk8s_users }}'
          loop_control:
            loop_var: user
            label: '{{ user }}'

        - name: wait for microk8s
          become: yes
          command: "{{wait_for_microk8s_command}}"
          changed_when: false
          register: mk8sstatusout
          failed_when:
              - "'This MicroK8s deployment is acting as a node in a cluster.' not in mk8sstatusout.stdout_lines"
              - mk8sstatusout.rc > 0

    - name: addons
      block:
        - name: enable community addons
          become: yes
          command:
            cmd: "/snap/bin/microk8s.enable community"
          when:
            - microk8s_community_addons is defined

        - name: get current addons state
          become: yes
          command:
            cmd: "/snap/bin/microk8s.status --format yaml"
          changed_when: no
          register: microk8s_status
          check_mode: no

        - name: set current state fact
          set_fact:
            microk8s_status: "{{ microk8s_status.stdout | from_yaml }}"

        - name: openebs prereq
          # doesn't work in multipass or on real ubuntu - times out due to sudo weirdness
          # ansible.builtin.systemd_service:
          #   name: iscsid
          #   enabled: true
          command:
            cmd: "systemctl enable iscsid"
          become: true
          when:
            - '"openebs" in microk8s_addons'
            - microk8s_addons["openebs"]

        - name: enable addons
          become: yes
          loop: "{{ microk8s_status.addons }}"
          loop_control:
            label: "{{ item.name }}"
          command:
            cmd: "/snap/bin/microk8s.enable {{ item.name }}{% if microk8s_addons[item.name] != True %}:{{ microk8s_addons[item.name] }}{% endif %}"
          when:
            - item.status == 'disabled'
            - item.name in microk8s_addons
            - microk8s_addons[item.name]

        - name: openebs postreq
          command:
            cmd: "/snap/bin/microk8s.kubectl patch storageclass openebs-hostpath -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'"
          when:
            - '"openebs" in microk8s_addons'
            - microk8s_addons["openebs"]

        - name: disable addons
          become: yes
          loop: "{{ microk8s_status.addons }}"
          loop_control:
            label: "{{ item.name }}"
          command:
            cmd: "/snap/bin/microk8s.disable {{ item.name }}"
          when:
            - item.status == 'enabled'
            - item.name in microk8s_addons
            - not microk8s_addons[item.name]
      when:
        - microk8s_addons is defined

    - name: node labels
      loop: "{{ microk8s_node_labels }}"
      loop_control:
        label: "{{ item }}"
      command:
        cmd: "/snap/bin/microk8s.kubectl label nodes {{ inventory_hostname_short }} '{{ item }}'"

    - name: registry config
      block:
        - name: mkdir
          file:
            path: /var/snap/microk8s/current/args/certs.d/registry.localdomain:32000/
            state: directory
          become: true
        - name: config
          template:
            src: hosts.toml
            dest: /var/snap/microk8s/current/args/certs.d/registry.localdomain:32000/hosts.toml
          become: true

    - name: microk8s config
      block:
        - name: read
          command: /snap/bin/microk8s.config
          register: microk8s_config_output
          become: true
        - name: write
          local_action:
            module: copy
            content: "{{microk8s_config_output.stdout}}"
            dest: "{{path_to_microk8s_config}}"
        - name: announce
          ansible.builtin.debug:
            msg: "microk8s config at {{path_to_microk8s_config}}"
